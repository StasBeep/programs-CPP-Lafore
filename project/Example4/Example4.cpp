// Example4.cpp
// Программа для всех упражнений главы 4 (стр. 215-216)

#include <iostream>
#include <process.h>			// для exit()
#include <conio.h>				// для _getch
using namespace std;

////////////// struct Distance /////////////////////////////////////////
struct Distance			// структура для упражнения 4
{
	int feet;			// футы
	float inches;		// дюймы
};

///////////// struct time //////////////////////////////////////////////
struct timer			// структура для упражнения 6
{
	unsigned int hour;		// часы
	int minute;				// минуты
	int second;				// секунды
};

////////////////////////////////// прототипы функций ///////////////////
float circarea(float radius1);		// прототип функции для упражнения 1
double power(double nF, int pF);	// прототип функции для упражнения 2
void zeroSmaller(int& a11, int& a22); // прототип для упражнения 3
void comparison(Distance d1, Distance d2); // прототип для упражнения 4
long hms_to_secs(int, int, int);	// прототип функции для упражнения 5
long time_to_secs(timer);			// прототип для упражнения 6 (1)
timer secs_to_time(long, long);		// прототип (упр. 6) (2)
void mroat(char);					// прототип для упр. 7 (char)
void mroat(int);					// прототип для упр. 7 (int)
void mroat(long);					// прототип для упр. 7 (long)
void mroat(float);					// прототип для упр. 7 (float)
void fadd(float, float);			// прототип функции для упражнения 8
									// сумма
void fsub(float, float);			// прототип функции для упражнения 8
									// разность
void fmul(float, float);			// прототип функции для упражнения 8
									// произведение
void fdiv(float, float);			// прототип функции для упражнения 8
									// частное

// --------------------- глобальные переменные -------------------------
long time;			// результат через функцию (упражнение 5)

///////////////////////////// int main /////////////////////////////////
int main()
{
	// подключение русского языка
	setlocale(LC_ALL, "Russian");

	// переменные для работы в main
	int key;				// переменная для меню
	char z1 = 'a';			// переменная для упражнения 2 (switch)

	// МЕНЮ
	cout << " МЕНЮ " << endl;
	cout << " Упражнение 1 " << endl;
	cout << " Упражнение 2 " << endl;
	cout << " Упражнение 3 " << endl;
	cout << " Упражнение 4 " << endl;
	cout << " Упражнение 5 " << endl;
	cout << " Упражнение 6 " << endl;
	cout << " Упражнение 7 " << endl;
	cout << " Упражнение 8 " << endl;
	cout << "----------------------------------------------------\n" << endl;
	cout << " Для выхода нажмите 0 ...\n" << endl;
	cout << "----------------------------------------------------\n" << endl;

	// меню с работой упражнений
	do
	{
		// выбор упражнения
		cout << "Введите номер упражнения: ";
		cin >> key;
		cout << "-------------------------------------------------\n" << endl;
	// Упражнение 1
		if (key == 1)
		{
			// Упражнение 1:
			// Написать функцию с именем circarea(), которая вычисляет площадь
			// круга. Функция должна принимать один аргумет типа float и возвра-
			// щать значение типа float. Напишите функцию main(), которая просит
			// пользователя ввести значения радиуса, вызывает функцию circarea(),
			// а затем отображает результат вычисления на экране.

			cout << "\n Упражнение 1 \n" << endl;

			int m1 = 1;			// ключ для зацикливания упражнения 1
			float radiusC;		// переменная для значения радиуса круга

			// цикл упражнения 1
			do
			{
				cout << "Вычисление площади круга!" << endl;
				
				// Ввод радиуса круга
				cout << "Введите радиус круга: ";
				cin >> radiusC;

				// Обращение в функцию
				float area = circarea(radiusC);

				// вывод результата площади круга
				cout << "Площадь круга с радиусом " << radiusC << " равна "
					 << area << endl << endl;

				// для зацикливания
				cout << " Хотите продолжить (любая клавиша) или выйти? " << endl;
				cout << " Для выхода нажмите 0 ... " << endl;
				cin >> m1;

			} while (m1 != 0);
		}

	// Упражнение 2
		if (key == 2)
		{
			// Упражнение 2:
			// Написать функцию с именем power(), которая в качестве аргументов
			// принимает значение типа double для n и значение типа int для p и
			// возвращает значение типа double. Для аргумента, соответствующего
			// степени числа, задайте значение числа по умолчанию, равное 2,
			// чтобы при отсутствии показателя степеней при вызове функции число
			// n возводилось в квадрат

			cout << "\n Упражнение 2 \n" << endl;
			
			// переменные для упражнения 2
			double n, resultS;	// число для возведения в степень и результат возв. 
								// в степень
			int p = 2;			// степень числа (по умолчанию равно 2)

			cout << " Возведение числа n в степень p ! " << endl << endl;
			
			cout << " Выберите вариант возведения в степень: " << endl;
			cout << "      1. Вариант по умолчанию (квадрат числа) " << endl;
			cout << "      2. Вариант с выбором произвольной степени " << endl;
			cout << "      Enter. Выход... " << endl;
			cout << "----------------------------------------------\n" << endl;
			cout << "Вариант: ";
			z1 = _getch();
			
			// меню switch
			switch (z1)
			{
			// Выбор первого варианта
			case '1':
				cout << "Выбор первого варианта" << endl;
				cout << "----------------------\n" << endl;
				cout << "Введите число для возведения в квадрат: ";
				cin >> n;
				resultS = power(n, p);
				cout << "\n Результат: " << resultS << endl;
				break;
			// Выбор второго варианта
			case '2':
				cout << "Выбор второго варианта" << endl;
				cout << "----------------------\n" << endl;
				cout << "Введите число для возведения в степень: ";
				cin >> n;
				cout << "Введите степень: ";
				cin >> p;
				resultS = power(n, p);
				cout << "\n Результат: " << resultS << endl << endl;
				break;
			// Выбор 0 варианта
			case '\r':
				cout << " Выход ... " << endl;
				exit (0);
				break;
			// Другой вариант, помимо существующих
			default:
				cout << "\nПопробуйте выбрать снова\n" << endl;
			}
		}

	// Упражнение 3
		if (key == 3)
		{
			// Упражнение 3:
			// Написать функцию с именем zeroSmaller(), в которую передаются с
			// помощью ссылок два аргумента типа int, присваивающую меньшему из
			// аргументов нулевое значение. Написать программу для проверки ра-
			// боты функции.

			cout << "\n Упражнение 3 \n" << endl;

			cout << " Введите два аргумента (через пробел) для сравнения: ";
			int a1, a2;			// переменные для функции сравнения zeroSmaller()
			cin >> a1 >> a2;
			zeroSmaller(a1, a2);
			cout << "---------------------------------------------\n";
			cout << "Наименьшее из стравниваемых чисел занулится\n" << endl;
			cout << "При сравнении вышел такой результат " << a1 << "  " << a2
				 << endl << endl;
		}

	// Упражнение 4
		if (key == 4)
		{
			// Упражнение 4:
			// Напишите функцию, принимающую в качестве аргументов два зна-
			// чения типа Distance и возвращает значение большего из аргу-
			// ментов.

			cout << "\n Упражнение 4 \n" << endl;
			
			// переменные типа Distance
			Distance x1, x2;		// которые сравниваются

			cout << "Сравнение двух аргументов и вывода наибольшего из двух:\n";
			cout << "Введите футы и дюймы через пробел первого аргумента: ";
			cin >> x1.feet >> x1.inches;
			cout << "Введите футы и дюймы через пробел второго аргумента: ";
			cin >> x2.feet >> x2.inches;
			cout << "Сравнение ... " << endl;
			comparison(x1,x2);
		}

	// Упражнение 5
		if (key == 5)
		{
			// Упражнение 5:
			// Написать функцию с именем hms_to_secs(), именующую три аргумента
			// типа int: часы, минуты, и секунды. Функция должнавозвращать экви-
			// валент переданного ей временного значения в секундах (типа long).
			// Создайте программу, которая будет циклически запрашивать у поль-
			// зователя ввод значения часов, минут, секунд и выводить результат
			// работы программы на экран

			cout << "\n Упражнение 5 \n" << endl;

			// переменная для зацикливания
			char vvqKey = 'a';

			do
			{
				int TT, Tt, tt;		// переменные типа int для ввода времени
				int lok = 1;		// ключ для зацикливания
				do
				{
					cout << "Введите часы, минуты, секунды (через пробел): ";
					cin >> TT >> Tt >> tt;
					cout << "------------------------------------------" << endl;
					cout << "\n Вы ввели: " << TT << " часов " << Tt << " минут "
						<< tt << " секунд " << endl << endl;
					if (Tt > 60)
					{
						cout << "Некорректно введены минуты, минуты < 60 !" 
							 << endl;
						lok = 0;
					}
					if (tt > 60)
					{
						cout << "Некорректно введены cекунды, секунды < 60 !"
							 << endl;
						lok = 0;
					}
					if (lok == 0)
					{
						cout << "Хотите продолжить без ограничений? (1/0) "
							 << endl;
						char YYES = 'a';
						cin >> YYES;
						if (YYES == '1')
							lok = 1;
						else if (YYES == '0')
							lok = 0;
					}
				} while (lok != 1);
				time = hms_to_secs(TT, Tt, tt);		// функция перевода времени
				cout << "Результат введённого времени в секундах: " << time
					 <<endl;
				cout << "--------------------------------------------------\n";
				cout << "Хотите завершить? (Enter)\n";
				vvqKey = _getch();
			} while (vvqKey != '\r');
		}

	// Упражнение 6
		if (key == 6)
		{
			// Упражнение 6:
			// Модифицируйте программу, в упражнении 5 описанная. Следующая прог-
			// рамма включает в себя две функции time_to_secs(), первая, которая
			// принимает значение структуры типа time и возвращает эквивалентное
			// значение в секундах типа long. Вторая, secs_to_time(), в качестве
			// аргумента принимает число секунд, имеющее тип long, а возвращает 
			// эквивалентное значение типа time

			cout << "\n Упражнение 6 \n" << endl;

			cout << "Две функции типа time и long. Возвращает значение типа time"
				 << " суммы этих двух функций \n" << endl;
			cout << "----------------------------------------------------------";
			cout << "\n Введите начальное время (часы,минуты,секунды): ";
			timer NvT,KvT;
			cin >> NvT.hour >> NvT.minute >> NvT.second;
			cout << " Введите количество переходных секунд: ";
			long PerXTime;
			cin >> PerXTime;
			cout << "Вы ввели: " << NvT.hour << " часов " << NvT.minute
				 << " минут " << NvT.second << " секунд " << endl;
			cout << " Переходное количество секунд: " << PerXTime << endl;
			cout << "-------------------------------------------" << endl;
			long NacHTime = time_to_secs(NvT);
			KvT = secs_to_time(NacHTime, PerXTime);
			cout << "Вывод конечного времени: " << KvT.hour << " часов "
				 << KvT.minute << " минут " << KvT.second << " секунд "
				 << endl << endl;
		}

	// Упражнение 7
		if (key == 7)
		{
			// Упражнение 7:
			// Взяв в качестве основы функцию power() из упражнения 2, работающую
			// только со знчением типа double, создайте перегруженные функции с
			// этим же именем, принимающими в качестве аргумента значения типа 
			// char, int, long, float. Напишите программу, вызывающую функцию со
			// всеми возможными типами аргументов. Функция работает и возвращает
			// значения |char =|, |int *2|, |long *3|, |float *4| с этими типами
			// значений.

			cout << "\n Упражнение 7 \n" << endl;

			// переменные
			char ii1;	// -----
			int ii2;	//		|> переменные для ввода
			long ii3;	//		|> char,int,long,float
			float ii4;	//------

			// ввод значений
			cout << "Выберите тип для работы функции char, int, long, float"
				 << " (c,i,l,f) : ";
			char kkey;		// ключ для работы меню switch

			// Ввод через _getche()
			kkey = _getche();
			
			cout << "\n------------------------------------------\n" << endl;

			// Меню switch
			switch (kkey)
			{
			// сhar (c)
			case 'c':
				cout << "Введите символ: ";
				cin >> ii1;
				mroat(ii1);
				break;
			// int (i)
			case 'i':
				cout << "Введите число: ";
				cin >> ii2;
				mroat(ii2);
				break;
			// long (l)
			case 'l':
				cout << "Введите число: ";
				cin >> ii3;
				mroat(ii3);
				break;
			// float (f)
			case 'f':
				cout << "Введите число: ";
				cin >> ii4;
				mroat(ii4);
				break;
			// default
			default:
				cout << "Попробуйте ещё раз!" << endl;
			}
		}

	// Упражнение 8
		if (key == 8)
		{
			// Упражнение 8:
			// Упражнение 12, так как упражнение 8 и упражнение 9 при помощи 
			// ссылок применяется, нет особой сложности. Упражнение 10 и 11 уже
			// повторяются нет интереса их описывать
			// Упражнение 12: Калькулятор при помощи функции

			cout << "\n Упражнение 8 \n" << endl;
			
			float x, y;
			char chxy;

			cout << "Введите вещественные числа и операцию (калькулятор) "
				 << " (Пример: 2.3 \"+ - * /\" 4.5) : ";
			cin >> x >> chxy >> y;
			cout << "\n-----------------------------------------------\n";

			// меню работы функций
			switch (chxy)
			{
			// сумма
			case '+':
				fadd(x, y);
				break;
			// разность
			case '-':
				fsub(x, y);
				break;
			// произведение
			case '*':
				fmul(x, y);
				break;
			// частное
			case '/':
				fdiv(x, y);
				break;
			}
		}

	// При нажатии 0
		if (key == 0)
			cout << " Выход ..." << endl;

	// При нажатии на любую клавишу за исключением номеров упражнений и 0 
		else
		{
			cout << " Выберите упражнение ";
			cout << "или для выхода нажмите 0...\n" << endl;
		}
	} while (key != 0);

	// завершение программы
	return 0;
}

// ----- функция circarea()---------------------------------------------
// вычисление площади круга
float circarea(float radius1)
{
	float Marea = 3.14 * radius1 * radius1;
	return Marea;
}

// ----- функция power() -----------------------------------------------
// возведение в степень
double power(double nF, int pF)
{
	double resultF = 1;		// переменная для возврата результата

	if (pF > 0)
	{
		for (int i = pF; i > 0; i--)
		{
			resultF *= nF;
		}
	}
	else if (pF < 0)
	{
		for (int i = pF; i < 0; i++)
		{
			resultF *= (1 / nF);
		}
	}
	// возврат результата функции
	return resultF;
}

// ----- функция zeroSmaller() -----------------------------------------
// Возврат значения после сравнения и зануления наименьшего
void zeroSmaller(int& a11, int& a22)
{
	if (a11 > a22)
		a22 = 0;
	else if (a22 > a11)
		a11 = 0;
	else if (a22 == a11)
		a11 = a22 = 0;
}

// ----- функция comparison() ------------------------------------------
// сравнивание аргументов выраженных в фунтах и дюймах
void comparison(Distance d1, Distance d2)
{
	float inches1 = (d1.feet * 12 + d1.inches);	// перевод футов x1
	float inches2 = (d2.feet * 12 + d2.inches);	// перевод футов x2

	if (inches1 > inches2)
		cout << "Аргумент первый больше: " << d1.feet << "\ '- "
			 << d1.inches << " \" " << endl;
	else if (inches1 < inches2)
		cout << "Аргумент второй больше: " << d2.feet << "\ '- "
			 << d2.inches << " \" " << endl;
	else if (inches1 = inches2)
		cout << "Аргументы одинаковы" << endl;
}

// ----- функция hms_to_secs() -----------------------------------------
// перевод введёного времени в секунды
long hms_to_secs(int TT1, int Tt1, int tt1)
{
	long resultFun = TT1 * 3600 + Tt1 * 60 + tt1;
	return resultFun;
}

// ----- функция time_to_secs ------------------------------------------
// Перевод значений из типа time в тип long
long time_to_secs(timer nvt)
{
	long NachT = nvt.hour * 3600 + nvt.minute * 60 + nvt.second;
	return NachT;
}

// ----- функция secs_to_time ------------------------------------------
// Сумма значений типа long и вывод результата в типе times
timer secs_to_time(long NV, long PV)
{
	long KV = NV + PV;		// сумма двух значений секунд
	long VS = KV;			// вспомогательная переменная для вычисления
	timer TI;				// вывод результата
	TI.hour = static_cast<long>(KV / 3600);	// выделение целой части
											// часов (KV/360)
	KV = 0;
	KV = VS - TI.hour * 3600;	// остаток минут и секунд
	VS = KV;	// присваивание вспомогательной переменной
	TI.minute = static_cast<long>(KV / 60);	// выделение целой части
											// минут (KV/60)
	TI.second = VS - TI.minute * 60;	// вычисление остатка секунд
	return TI;
}

// ----- функции для упражнения 7 mroat() ------------------------------
// функции с один названием, разными типами аргументов
void mroat(char ii11)
{
	cout << endl;
	for (int i = 0; i < 45; i++)
		cout << ii11;
	cout << endl;
}
void mroat(int ii22)
{
	cout << "Результат значения " << ii22 << " функции типа int * 2: "
		 << ii22 * 2 << endl;
}
void mroat(long ii33)
{
	cout << "Результат значения " << ii33 << " функции типа long * 3: "
		<< ii33 * 3 << endl;
}
void mroat(float ii44)
{
	cout << "Результат значения " << ii44 << " функции типа float * 4: "
		<< ii44 * 4 << endl;
}

// ----- функция калькулятора ------------------------------------------
// сумма, разность, произведение, частное
void fadd(float a, float b)
{
	cout << a << " + " << b << " = " << a + b << endl;
}
void fsub(float a, float b)
{
	cout << a << " - " << b << " = " << a - b << endl;
}
void fmul(float a, float b)
{
	cout << a << " * " << b << " = " << a * b << endl;
}
void fdiv(float a, float b)
{
	cout << a << " / " << b << " = " << a / b << endl;
}