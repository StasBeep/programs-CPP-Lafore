// Example5.cpp
// Программа для всех упражнений главы 5

#include <iostream>
#include <conio.h>
using namespace std;

///// class Int ///////////////////////////////////////////////////////
class Int		// класс для упражнения 1
{
private:
	int Nnumber;	// значение для сложение переменных в упр. 1
public:
	Int() : Nnumber(0)	// конструктор без аргументов
	{ }
	Int(int Nn) : Nnumber(Nn)	// конструктор с аргументами
	{ }

	// функции ввода переменных
	void Vvod()
	{
		cout << "\nВведите число: ";
		cin >> Nnumber;
	}
	// Вывод результата на экран
	void Displays()
	{
		cout << Nnumber;
	}
	void add(Int, Int);		// прототип для сложения числа
};

///// class tollBooth /////////////////////////////////////////////////
class tollBooth			// класс для упражнения 2
{
private:
	unsigned int Kol;		// количество проехавших машин
	double Cent;			// суммарная выручка от оплаты проезда
public:
	tollBooth() : Kol(0), Cent(0.0)	// конструктор
	{ }
	// метод прибавляет проехавшую машину + оплату
	void payingCar()
	{
		Kol++;
		Cent += 0.5;
	}
	// метод прибавляет проехавшую машину
	void nopayCar()
	{
		Kol++;
	}
	void disp()const
	{
		cout << "\n Машины: " << Kol << ", Деньги: " << Cent << endl;
	}
};

///// class TTime /////////////////////////////////////////////////////
class TTime
{
private:
	int hour;
	int mint;
	int secd;
public:
	TTime() : hour(0), mint(0), secd(0)	  // конструктор без аргументов
	{ }
	// конструктор с аргументами
	void TTimes(int h,int m,int s)
	{ 
		hour = h;
		mint = m;
		secd = s;
	}
	// вывод результата
	void disptime()
	{
		cout << "Время: " << hour << ":" << mint << ":" << secd
			 << endl;
	}
	// прототип суммы двух времен
	void add_time(TTime, TTime);		// прототип
};

///// class employee //////////////////////////////////////////////////
class employee
{
private:
	char PEOPLE[20];
	int NNum;
	float Okl;
public:
	void WritePeople()
	{
		cout << "Введите имя пользователя: ";
		cin >> PEOPLE;
		cout << "Введите номер пользователя: ";
		cin >> NNum;
		cout << "Введите оклад пользователя: ";
		cin >> Okl;
	}
	void dispPep()
	{
		cout << "Имя: " << PEOPLE << " ,номер: " << NNum
			 << " ,оклад участника: " << Okl << endl;
	}
};

///// class date //////////////////////////////////////////////////////
class date
{
private:
	int day;				// день
	int month;				// месяц
	int year;				// год
public:
	void getdate()
	{
		char ch1;
		cout << "\n Введите дату через /, (например 31/03/98): ";
		cin >> day >> ch1 >> month >> ch1 >> year;
		cout << endl;
	}
	void showdate()
	{
		cout << "\n-------------------------------------\n" << endl;
		cout << "Вы ввели: " << day << "/" << month << "/" << year
			 << endl << endl;
	}
};

///// int main() //////////////////////////////////////////////////////
int main()
{
	setlocale(LC_ALL, "Russian");
	int key;			// ключ для меню
	char button;	// ключ для работы с циклом в упражнении 2
	tollBooth Car;	// турникер для проезда машин
	int key3;		// ключ для работы с циклом в упражнение 3
	char ch;		// для упражнения 3 (для ввода времени)

	// меню
	cout << "МЕНЮ" << endl;
	cout << "Упражнение 1" << endl;
	cout << "Упражнение 2" << endl;
	cout << "Упражнение 3" << endl;
	cout << "Упражнение 4" << endl;
	cout << "Упражнение 5" << endl;
	cout << "---------------------------" << endl;
	cout << "Введите номер упражнения: ";
	cin >> key;
	cout << "---------------------------" << endl;
	cout << "---------------------------" << endl;

	// Упражнение 1
	if (key == 1)
	{
		// Упражнение 1:
		// Создать класс Int, имитирующий стандартный тип int.Единствен-
		// ное поле этого класса должно иметь тип int. Создайте методы,
		// которые будут устанавливать значение поля, равным нулю, инициа-
		// лизировать его целым значением, выводить значение поля на экран
		// и складывать два значения типа int.
		// Напишите программу, в которой будут созданы три объекта класса
		// Int, два из которых будут инициализированны. Сложите два инициа-
		// лизированных объекта, присвойте результат третьему, а затем отоб-
		// разите результат на экране.

		cout << "\nУпражнение 1\n" << endl;

		Int number1, number2, number3;	// сумма 1 и 2, результат в 3
		number1.Vvod();					// ввод первого числа
		number2.Vvod();					// ввод второго числа
		number3.add(number1, number2);	// number1 + number2 = number3
		cout << "------------------------" << endl;
		number1.Displays();
		cout << " + ";
		number2.Displays();
		cout << " = ";
		number3.Displays();
		cout << endl;
	}

	// Упражнение 2
	else if (key == 2)
	{
		// Упражнение 2:
		// Представьте пункт для взимания платежей з проезд по автостраде.
		// Каждая проезжающая машина должна заплатить за проезд 50 центов,
		// однако часть машин платит за проезд, а часть проезжает бесплат-
		// но. В кассе ведётся учёт числа проехавших машин и суммарная вы-
		// ручка от платы за проезд.
		// Создайте модель такой кассы с помощью класса tollBooth. Класс
		// должен содержать два поля. Одно из них, типа unsigned int, пред-
		// назначенное для учёта количества проехавших автомобилей, а вто-
		// рое, имеющее тип double, будет содержать суммарную выручку от 
		// платы за проезда. Конструктор должен инициализировать оба поля
		// нулевыми значениями. Метод payingCar() инкрементирует число машин
		// и увеличивает на 0,5 суммарную выручку. Другой метод, nopayCar(),
		// увеличивает на единицу число число автомобилей, но оставляет вы-
		// ручку без изменений. Метод display() выводит оба значения на экран
		// Создайте программу, которая демонстрирует работу класса. Программа
		// должна предложить пользователю нажать одну клавишу для того, чтобы
		// сымитировать заплатившего автолюбителя, и другую клавишу, чтобы 
		// сымитировать недобросовестного водителя. Нажатие клавиши Esc 
		// должно привести к выдаче текущих значений количества машин и вы-
		// ручки и завершению программы.

		cout << "\n Упражнение 2\n" << endl;

		cout << "КАССА: " << endl;

		do
		{
			cout << "Выберите вариант проезда: " << endl;
			cout << "1. Машина проехала, проезд оплачен " << endl;
			cout << "2. Машина проехала, проезд БЕЗ оплаты " << endl;
			cout << "Для завершения смены нажмите Esc " << endl;
			cout << "-------------------------------------" << endl;
			cout << "-------------------------------------\n" << endl;

			button = _getch();
			if (button == '1')
				Car.payingCar();
			if (button == '2')
				Car.nopayCar();
		} while (button != 27);		// Выход из цикла при нажати на Esc
		Car.disp();
	}

	// Упражнение 3
	else if (key == 3)
	{
		// Упражнение 3:
		// Создайте класс с именем time, содеражащий три поля типа int, пред-
		// назначенные для хранения часов, минут и секунд. Один из конструк-
		// торов класса должен инициализировать поля нулевыми значениями, а 
		// другой конструктор - заданный наборм значений. Создайте метод 
		// класса, который будет выводить значения полей на экран в формате
		// 11:56:58, и метод, складывающий значения двух объектов типа time,
		// передаваемых в качестве аргументов.
		// В функции main() следует создать два инициализированных объекта.
		// и один неинициализированный объект. Затем сложите два два инициа-
		// лизированных значения, а результат присвойте третьему объекту.

		cout << "\nУпражнения 3\n" << endl;

		cout << "Выберите вариант со временем: " << endl;
		cout << "1. Показать заданное время " << endl;
		cout << "2. Сложить два времени " << endl;
		cout << "Для выхода нажмите 0 ..." << endl;
		cout << "------------------------------" << endl;

		TTime timer1, timer2, timer3;
		int u = 12, k = 58, o = 56;
		
		cout << endl;
		do
		{
			cin >> key3;
			if (key3 == 1)
			{
				timer1.TTimes(u, k, o);
				timer1.disptime();
			}
			if (key3 == 2)
			{
				cout << "Введите 1 время через :, (пример 12:56:57): ";
				cin >> u >> ch >> k >> ch >> o;
				if (o > 60)
				{
					k++;
					o -= 60;
				}
				if (k > 60)
				{
					u++;
					k -= 60;
				}
				timer1.TTimes(u, k, o);
				cout << "------------------------------------" << endl;
				cout << "Введите 2 время через :, (пример 12:56:57): ";
				cin >> u >> ch >> k >> ch >> o;
				if (o > 60)
				{
					k++;
					o -= 60;
				}
				if (k > 60)
				{
					u++;
					k -= 60;
				}
				timer2.TTimes(u, k, o);
				cout << "------------------------------------" << endl;
				cout << endl;
				timer3.add_time(timer1, timer2);	// сумма времен
				cout << "Вы ввели первое время: " << endl;
				timer1.disptime();
				cout << "Вы ввели второе время: " << endl;
				timer2.disptime();
				cout << "Сумма двух этих времён: " << endl;
				timer3.disptime();
			}
			cout << "Хотите продолжить?Нажмите любую цифру, кроме 0"
				 << endl;
		} while (key3 != 0);
	}

	// Упражнение 4
	else if (key == 4)
	{
		// Упражнение 4:
		// Создайте класс employee, класс должен включать поле типа int для
		// хранения номера сотрудника и поле типа float для хранения вели-
		// чины его оклада. Методы класса должны позволять пользователю 
		// вводить и отображать данные класса.
		// Написать функцию main(), которая запросит пользователя ввести дан-
		// ные для трёх сотрудников и выведет полученную информацию на экран

		cout << "\nУпражнение 4\n" << endl;

		employee people1, people2, people3;
		cout << "Регистрация участников" << endl;
		int p = 1;			// ключ под цикл
		do
		{
			cout << "-----------------------" << endl;
			if (p == 1)
			{
				people1.WritePeople();
				p++;
			}
			if (p == 2)
			{
				people2.WritePeople();
				p++;
			}
			if (p == 3)
			{
				people3.WritePeople();
			}
		} while (p != 3);
		cout << endl << endl << endl;
		cout << "---------------------------------" << endl;
		cout << "Участники программы: " << endl;
		people1.dispPep();
		people2.dispPep();
		people3.dispPep();
	}

	// Упражнение 5
	else if (key == 5)
	{
		// Упражнение 5:
		// Создать класс date. Его данные должны размещаться в трёх полях 
		// типа int: month, day, year. Метод класса getdate() должен при-
		// нимать значение для объекта в формате 12/31/02, а метод 
		// showdate() - выводить данные на экран.

		cout << "\nУпражнение 5\n" << endl;

		date DATE;
		DATE.getdate();
		DATE.showdate();
	}

	// Выбрано упражнение, которое не существует
	else
		cout << "Такого упражнения не существует! Перезапустите...";
	// завершение main()
	return 0;
}

// ----- void Int::add(Int,Int) ---------------------------------------
// сумма значений упражнения 1
void Int::add(Int Nn1, Int Nn2)
{
	Nnumber = Nn1.Nnumber + Nn2.Nnumber;
}

// ----- void add_time (TTime,TTime) ----------------------------------
// сумма двух времён
void TTime::add_time(TTime time1, TTime time2)
{
	secd = time1.secd + time2.secd;			// сумма секунд
	if (secd > 60)
	{
		mint++;				// прибавление минуты
		secd -= 60;			// вычитание лишних секунд
	}
	mint += time1.mint + time2.mint;		// сумма минут
	if (mint > 60)
	{
		hour++;				// прибавление 1 часа
		mint -= 60;			// вычитание лишних минут
	}
	hour += time1.hour + time2.hour;		// сумма часов
}